(define testDataGood '(
	()
	#t
	#f
	1
	2
	#()
	#(1 2 3)
	""
	"abc"
	(1 2)
	(set! a b)
	(if a x)
	(if a x y)
	(lambda () x)
	(lambda () x y)
	(lambda (x) x)
	(lambda (x) x y)
	(lambda x y)
	(lambda x y z)
	(lambda (a b c) d)
	(lambda (a b c) d e)
	(lambda (a b c . d) e)
	(lambda (a b c . d) e f)
	(let () x)
	(let ((a #f)) a)
	(let () x y)
	(let ((a b)) c)
	(let ((a b)) c d)
	(let* () x)
	(let* ((a #f)) a)
	(let* () x y)
	(let* ((a b)) c)
	(let* ((a b)) c d)
	(letrec () x)
	(letrec ((a #f)) a)
	(letrec () x y)
	(letrec ((a b)) c)
	(letrec ((a b)) c d)
	(let name () x y)
	(let name ((a #f)) a)
	(let name ((x y)) x y)
	(let name ((a c) (b d)) e f)
	((lambda (x)
		(if x 3 4))
		5)
	(lambda x (if (< x (* x 2)) #t "abc"))
	))

(define testDataBad '(
	(set!)
	(set! a)
	(set! a b c)
	(if)
	(if a b c d)
	(lambda)
	(lambda ())
	(lambda (()))
	(lambda ((x)))
	(let)
	(let x)
	(let x y)
	(let (x))
	(let (x) y)
	(let (x y) z)
	(let (((x) y)) z)
	(let (((x y))) z)
	(let*)
	(let* x)
	(let* x y)
	(let* (x))
	(let* (x) y)
	(let* (x y) z)
	(let* (((x) y)) z)
	(let* (((x y))) z)
	(letrec)
	(letrec x)
	(letrec x y)
	(letrec (x))
	(letrec (x) y)
	(letrec (x y) z)
	(letrec (((x) y)) z)
	(letrec (((x y))) z)
	(let name)
	(let name x)
	(let name x y)
	(let name (x))
	(let name (x) y)
	(let name (x y) z)
	(let name (((x) y)) z)
	(let name (((x y))) z)
	(lambda (a b #f) x)
	))

(define testGood
	(lambda ()
		(let ((tempData (map parse-exp testDataGood)))
			(display (format "~s\n" tempData))
			(display (format "~s\n" testDataGood))
			(display (map unparse-exp tempData)))))
(define testBad
	(lambda ()
		(let ((tempData (map parse-exp testDataBad))) 
			(display (format "~s\n" tempData)))))
(define testGood2
	(lambda ()
		(andmap (lambda (x) (equal? (unparse-exp (parse-exp x)) x)) testDataGood)))
(define testBad2
	(lambda()
		(andmap null? (map parse-exp testDataBad))))
	